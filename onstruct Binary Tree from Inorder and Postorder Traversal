class Solution {
public:
    
        int findindex( vector<int>& inorder,int no,int start,int end)
    {
     
        int ans=0;   
        for(int i=start;i<=end;i++)
        {
            if(inorder[i]==no)
            {
                ans=i;
                break;
            }   
        }
        return ans;
    }
    TreeNode* convert(vector<int>& postorder1, vector<int>& inorder,int start,int end,int &curr)
    {
        if(start>end)
            return NULL;
        
        TreeNode *root= new TreeNode;
        root->left=NULL;
        root->right=NULL;
        root->val=postorder1[curr--];
        
        
        if(start==end)
            return root;

        int index=findindex(inorder,root->val,start,end);
        cout<<index;
        
       
        root->right=convert(postorder1,inorder,index+1,end,curr);
        root->left=convert(postorder1,inorder,start,index-1,curr);
        
        return  root;
    }
    
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
          int start=0;   
        int end=postorder.size()-1;
        int curr=inorder.size()-1;
        
        TreeNode * ans=convert(postorder,inorder,start,end,curr);
            
            return ans;
        
    }
};
