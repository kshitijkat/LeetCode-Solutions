class Solution {
public:
    
    void dfs( vector<vector<int>>& adj, vector<bool> &visited, int start){
        visited[start] = true;
        for(int i : adj[start])
        {
            if(!visited[i])
                dfs(adj, visited, i);
        }
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1)
            return -1;
        vector<vector<int>> adj(n);
        for(auto x : connections)
        {
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        vector<bool> visited(n, false);
        int result = 0;
        for(int i=0; i<n; i++)
        {
            if(!visited[i])
            {
                dfs(adj,visited,i);
                result++;
            }
        }
        return result-1;
    }
};
