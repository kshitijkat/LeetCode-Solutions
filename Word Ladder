class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set dict(wordList.begin(), wordList.end());
        if(dict.find(endWord)==dict.end())
            return 0;
        queue<string> q;
        int steps = 1;
        q.push(beginWord);
        while(!q.empty())
        {
            int n = q.size();
            for(int i=0; i<n; i++)
            {
                string word = q.front();
                q.pop();
                if(word == endWord)
                    return steps;
                dict.erase(word);
                for(int j=0; j<word.size();j++)
                {
                    char c = word[j];
                    for(int k=0; k<26; k++)
                    {
                        word[j] = 'a'+ k;
                        if(dict.find(word) != dict.end())
                        {
                            q.push(word);
                            dict.erase(word);
                        }
                    }
                    word[j] = c;
                }
            }
            steps++;
        }
        return 0;
    }
};
